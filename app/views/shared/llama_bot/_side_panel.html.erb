<!-- Side panel for the Llama Bot, includes the html and javascript for managing it -->


<div id="llama-side-panel" class="fixed top-0 left-0 h-full w-72 bg-gray-100 transform -translate-x-full transition-transform duration-300 ease-in-out z-50 text-gray-800" data-llama="exclude_when_saving_contenteditable_edits">
  <button id="llama-toggle-panel" class="absolute right-0 top-4 -mr-10 bg-gray-100 p-2 rounded-r cursor-pointer">
    <svg class="w-6 h-6" fill="none" stroke="currentColor" viewBox="0 0 24 24" xmlns="http://www.w3.org/2000/svg">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16M4 18h16"></path>
    </svg>
  </button>
  
  <div class="h-full overflow-y-auto p-4">
    <div class="mb-4">
      <div class="flex flex-col space-y-2">
        <a href="/pages" class="text-blue-500 hover:text-blue-600 font-bold flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path d="M10.707 2.293a1 1 0 00-1.414 0l-7 7a1 1 0 001.414 1.414L4 10.414V17a1 1 0 001 1h2a1 1 0 001-1v-2a1 1 0 011-1h2a1 1 0 011 1v2a1 1 0 001 1h2a1 1 0 001-1v-6.586l.293.293a1 1 0 001.414-1.414l-7-7z" />
          </svg>
          Home
        </a>
        <a href="/pages/new" class="text-green-500 hover:text-green-600 font-bold flex items-center">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" viewBox="0 0 20 20" fill="currentColor">
            <path fill-rule="evenodd" d="M10 3a1 1 0 011 1v5h5a1 1 0 110 2h-5v5a1 1 0 11-2 0v-5H4a1 1 0 110-2h5V4a1 1 0 011-1z" clip-rule="evenodd" />
          </svg>
          New Page
        </a>
      </div>
    </div>
    <hr class="my-2"/>
    <h2 class="text-xl font-bold mb-2">Your Pages</h2>
    <!-- TODO: Show the site's actual name rather than generic name. <=# @page&.site&.name || "your site" %> -->
    <div id="iframe-list" class="space-y-6">
      <!-- Iframe items will be dynamically added here -->
    </div>
    <hr class="my-2"/>
    <h2 class="text-xl font-bold mb-2">Drag and Drop</h2>
    <div id="drag-and-drop-list" class="space-y-6">
    <!-- Button Component -->
    <div class="draggable-component mb-4">
      <h3 class="text-xs font-medium text-gray-500 uppercase tracking-wide mb-1">Button</h3>
      <button class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded" draggable="true">
        Click me
      </button>
    </div>

    <!-- Card Component -->
    <div class="draggable-component mb-4">
      <h3 class="text-xs font-medium text-gray-500 uppercase tracking-wide mb-1">Card</h3>
      <div class="max-w-sm rounded overflow-hidden shadow-lg bg-white" draggable="true">
        <div class="px-6 py-4">
          <div class="font-bold text-xl mb-2">Card Title</div>
          <p class="text-gray-700 text-base">
            This is a sample card component that you can drag and drop onto your page.
          </p>
        </div>
      </div>
    </div>

    <!-- Alert Component -->
    <div class="draggable-component mb-4">
      <h3 class="text-xs font-medium text-gray-500 uppercase tracking-wide mb-1">Alert</h3>
      <div class="bg-yellow-100 border-l-4 border-yellow-500 text-yellow-700 p-4" role="alert" draggable="true">
        <p class="font-bold">Warning</p>
        <p>This is an example alert message.</p>
      </div>
    </div>

    <script>
      document.addEventListener('DOMContentLoaded', function() {
        const draggableComponents = document.querySelectorAll('.draggable-component > *[draggable="true"]');
        
        draggableComponents.forEach(component => {
          component.addEventListener('dragstart', function(e) {
            //document.getElementById('llama-side-panel').classList.add('hidden');
            const panel = document.getElementById('llama-side-panel');
            panel.classList.toggle('-translate-x-full');
            console.log('Drag started');
            e.dataTransfer.setData('text/plain', component.outerHTML);
          });
        });

        // Use document.body as a fallback if #drop-target doesn't exist
        const dropTarget = document.querySelector('#drop-target') || document.body;

        dropTarget.addEventListener('dragover', function(e) {
          e.preventDefault();
          console.log('Dragging over drop target');
        });

        dropTarget.addEventListener('dragenter', function(e) {
          e.preventDefault();
          console.log('Entered drop target');
        });

        dropTarget.addEventListener('drop', function(e) {
          e.preventDefault();
          console.log('Drop event fired');
          const droppedHTML = e.dataTransfer.getData('text/plain');
          let prompt = `the user has dragged this new element and dropped it onto the page at this element. Please merge this into the page. new element: \`\`\`${droppedHTML}\`\`\` should be inserted`
          console.log('Dropped HTML:', droppedHTML);
          console.log('Prompt:', prompt);
          if (droppedHTML) {
            // open chatbot
            toggleChat();
            let customEvent = new CustomEvent("elementSelected", {
              detail: e.target,
            });
            document.dispatchEvent(customEvent);
            insertPrompt(prompt);
            console.log('Component added to drop target');
          } else {
            console.log('No HTML data in drop event');
          }
        });

        console.log('Event listeners set up');
      });
    </script>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const panel = document.getElementById('llama-side-panel');
    const toggleBtn = document.getElementById('llama-toggle-panel');
    
    toggleBtn.addEventListener('click', function() {
      panel.classList.toggle('-translate-x-full');
    });

    setPagesOnSidePanel();

    async function setPagesOnSidePanel() {
      const iframeList = document.getElementById('iframe-list');
      try {
        const iframes = await getIFramesForThisSite();

        // Dynamically create iframe items
        iframes.forEach(iframe => {
          const iframeItem = document.createElement('div');
          iframeItem.className = 'iframe-item mb-6';

          //TODO: I pulled out this iFrame because it was too large
          //<iframe src="${iframe.previewUrl}" class="w-full h-64 border-0" frameborder="0" scrolling="no"></iframe>
          iframeItem.innerHTML = `
            <a href="${iframe.url}" class="block">
              <h3 class="text-lg underline text-blue-500 font-semibold mb-2">${iframe.title}</h3>
              <div class="iframe-wrapper relative">
              <!-- insert iframe here -->

                <div class="absolute inset-0"></div>
              </div>
            </a>
          `;
          iframeList.appendChild(iframeItem);
        });

        adjustIframeHeights();
      } catch (error) {
        console.error('Error setting pages on side panel:', error);
      }
    }
    
    
    /**
     * Fetch this pages siblings nested under this page's site, and put it into an iFrame format to display to the user.
     */
    async function getIFramesForThisSite() {
        let pages = await getPagesForThisSite();
        //return page.id == <%= @page&.id %> ? null : { id: page.id, title: page.slug, url: `/pages/${page.id}`, previewUrl: `/pages/${page.id}/preview`};
        return pages.map(page => {
            return { id: page.id, title: page.slug, url: `/pages/${page.id}`, previewUrl: `/pages/${page.id}/preview`};
        });
    }

    /**
     * Fetch the other sibling pages nested under this page's site.
     */
    async function getPagesForThisSite() {
        return fetch(`/pages.json?site_id=<%=@page&.site_id%>`)
            .then(response => response.json())
            .then(data => {
                return data;
        });
    }

    // Adjust iframe heights to fit content without scrolling
    function adjustIframeHeights() {
      const iframes = document.querySelectorAll('#iframe-list iframe');
      iframes.forEach(iframe => {
        iframe.onload = function() {
          iframe.style.height = iframe.contentWindow.document.body.scrollHeight + 'px';
        }
      });
    }
  });
</script>
