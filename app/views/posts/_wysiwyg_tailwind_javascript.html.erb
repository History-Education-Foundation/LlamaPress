    <%# This holds important HTML, CSS, and Javascript for the Llama WYSIWYG editor, used for the post content %>
    <style>
        #llama-wysiwyg-editor {
            min-height: 200px;
            border: 1px solid #ccc;
            padding: 10px;
        }
        #llama-toolbar {
            display: none;
            position: absolute;
            background-color: white;
            border: 1px solid #ccc;
            padding: 5px;
            border-radius: 5px;
        }
    </style>

        <!-- Existing floating toolbar -->
        <div id="llama-toolbar" class="flex space-x-2 bg-gray-100 p-2 rounded-t-lg border border-gray-300">
            <div class="relative inline-block">
                <button id="textDropdownButton" class="px-2 py-1 bg-gray-200 rounded">Tt</button>
                <div id="textDropdown" class="absolute hidden bg-white border rounded shadow-lg">
                    <button onclick="format('h1')" class="block w-full px-4 py-2 text-left hover:bg-gray-100">H1</button>
                    <button onclick="format('h2')" class="block w-full px-4 py-2 text-left hover:bg-gray-100">H2</button>
                    <button onclick="format('h3')" class="block w-full px-4 py-2 text-left hover:bg-gray-100">H3</button>
                    <button onclick="format('p')" class="block w-full px-4 py-2 text-left hover:bg-gray-100">Paragraph</button>
                </div>
            </div>
            <button onclick="format('bold')" class="px-2 py-1 bg-gray-200 rounded font-bold">B</button>
            <button onclick="format('underline')" class="px-2 py-1 bg-gray-200 rounded underline">U</button>
            <button onclick="format('strikethrough')" class="px-2 py-1 bg-gray-200 rounded line-through">S</button>
            <button onclick="createList('ul')" class="px-2 py-1 bg-gray-200 rounded">‚Ä¢</button>
            <button onclick="createList('ol')" class="px-2 py-1 bg-gray-200 rounded">1.</button>
            <button onclick="setColor('color')" class="px-2 py-1 bg-gray-200 rounded">üé®</button>
            <button onclick="setColor('backgroundColor')" class="px-2 py-1 bg-gray-200 rounded">üñåÔ∏è</button>
            <button onclick="document.execCommand('undo', false, null)" class="px-2 py-1 bg-gray-200 rounded">‚Ü©Ô∏è</button>
            <button onclick="document.execCommand('redo', false, null)" class="px-2 py-1 bg-gray-200 rounded">‚Ü™Ô∏è</button>
            <input type="color" id="colorPicker" class="hidden">
            <button onclick="changeFontSize(1)" class="px-2 py-1 bg-gray-200 rounded">A+</button>
            <button onclick="changeFontSize(-1)" class="px-2 py-1 bg-gray-200 rounded">A-</button>
        </div>

    <script>
        const editor = document.getElementById('editor');
        const toolbar = document.getElementById('toolbar');
        const colorPicker = document.getElementById('colorPicker');
        //const textDropdownButton = document.getElementById('textDropdownButton');
        const textDropdown = document.getElementById('textDropdown');

        editor.addEventListener('mouseup', saveSelection);
        editor.addEventListener('keyup', saveSelection);
        editor.addEventListener('mouseup', showToolbar);
        document.addEventListener('mousedown', hideToolbar);
//        textDropdownButton.addEventListener('click', toggleTextDropdown);

        let currentColorProperty = '';
        let lastSelection = null;

        function saveSelection() {
            const selection = window.getSelection();
            if (selection.rangeCount > 0) {
                lastSelection = selection.getRangeAt(0);
            }
        }

        function showToolbar() {
            const selection = window.getSelection();
            if (selection.toString().length > 0) {
                const range = selection.getRangeAt(0);
                const rect = range.getBoundingClientRect();
                toolbar.style.display = 'flex';
                toolbar.style.top = `${rect.top + window.scrollY - toolbar.offsetHeight - 10}px`;
                toolbar.style.left = `${rect.left + window.scrollX}px`;
            }
        }

        function hideToolbar(e) {
            if (!toolbar.contains(e.target) && e.target !== toolbar) {
                toolbar.style.display = 'none';
            }
        }

        function toggleTextDropdown(e) {
            e.stopPropagation();
            textDropdown.classList.toggle('hidden');
        }

        document.addEventListener('click', (e) => {
            if (!textDropdownButton.contains(e.target) && !textDropdown.contains(e.target)) {
                textDropdown.classList.add('hidden');
            }
        });

        function setColor(property) {
            currentColorProperty = property;
            colorPicker.click();
        }

        colorPicker.addEventListener('change', (e) => {
            const color = e.target.value;
            document.execCommand(currentColorProperty === 'color' ? 'foreColor' : 'hiliteColor', false, color);
        });

        function format(command, value = null) {
            if (['bold', 'italic', 'underline', 'strikethrough'].includes(command)) {
                document.execCommand(command, false, null);
            } else {
                document.execCommand('formatBlock', false, `<${command}>`);
                applyTailwindClasses(command);
            }
        }

        function createList(type) {
            document.execCommand(type === 'ul' ? 'insertUnorderedList' : 'insertOrderedList', false, null);
            applyTailwindClasses(type);
        }

        function applyTailwindClasses(tag) {
            const selection = window.getSelection();
            if (selection.rangeCount > 0) {
                const range = selection.getRangeAt(0);
                const container = range.commonAncestorContainer;
                const element = container.nodeType === 1 ? container : container.parentElement;

                // Remove any existing color classes
                element.classList.remove('text-red-500', 'text-blue-500', 'text-green-500', 'bg-yellow-200', 'bg-blue-200', 'bg-green-200');

                switch (tag) {
                    case 'h1':
                        element.className = 'text-4xl font-bold mb-4';
                        break;
                    case 'h2':
                        element.className = 'text-3xl font-semibold mb-3';
                        break;
                    case 'h3':
                        element.className = 'text-2xl font-medium mb-2';
                        break;
                    case 'p':
                        element.className = 'text-base mb-4';
                        break;
                    case 'ul':
                        element.className = 'list-disc list-inside';
                        break;
                    case 'ol':
                        element.className = 'list-decimal list-inside';
                        break;
                }
            }
        }

        function getColorClass(color, prefix) {
            const colorMap = {
                'rgb(255, 0, 0)': `${prefix}-red-500`,
                'rgb(0, 0, 255)': `${prefix}-blue-500`,
                'rgb(0, 128, 0)': `${prefix}-green-500`,
                'rgb(255, 255, 0)': `${prefix}-yellow-200`,
                'rgb(173, 216, 230)': `${prefix}-blue-200`,
                'rgb(144, 238, 144)': `${prefix}-green-200`,
            };
            return colorMap[color] || '';
        }

        // Add these lines to handle the new top toolbar
        const topTextDropdownButton = document.getElementById('topTextDropdownButton');
        const topTextDropdown = document.getElementById('topTextDropdown');

        topTextDropdownButton.addEventListener('click', toggleTopTextDropdown);

        function toggleTopTextDropdown(e) {
            e.stopPropagation();
            topTextDropdown.classList.toggle('hidden');
        }

        document.addEventListener('click', (e) => {
            if (!topTextDropdownButton.contains(e.target) && !topTextDropdown.contains(e.target)) {
                topTextDropdown.classList.add('hidden');
            }
        });

        function changeFontSize(change) {
            const selection = window.getSelection();
            if (selection.rangeCount > 0) {
                const range = selection.getRangeAt(0);
                const container = range.commonAncestorContainer;
                const element = container.nodeType === 1 ? container : container.parentElement;

                const sizeClasses = ['text-xs', 'text-sm', 'text-base', 'text-lg', 'text-xl', 'text-2xl', 'text-3xl', 'text-4xl'];
                let currentSize = sizeClasses.findIndex(cls => element.classList.contains(cls));

                if (currentSize === -1) currentSize = 2; // Default to 'text-base'

                let newSize = Math.max(0, Math.min(currentSize + change, sizeClasses.length - 1));

                sizeClasses.forEach(cls => element.classList.remove(cls));
                element.classList.add(sizeClasses[newSize]);
            }
        }
    </script>
